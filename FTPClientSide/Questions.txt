
1. Think about the conversation of FTP – how does each side validate the other (on the connection and data ports – think of each separately)? How do they trust that they’re getting a connection from the right person? Or to the right servers? Think back to HW1 about the conversation that you had over the phone.
FTP is one of the more older protocols. When it was first being implemented, the main goal was to be able to transfer files from one source to the destination. Not much thought was put into security and authentication of sending and receiving files. Once a socket connection is established between the client and server, information is freely passed between the two. The client validates the server when a connection is established with the designated host and port. The server side validates the client side when commands are sent from the client. With the FTP protocol there is not much security implemented on making sure the connection is with the "right person". Authentication occurs when the server can open a socket connection and login with the USER and PASS commands. Based off the host name and port numbers the client and server are able to tell if they are sending information to the correct receiving end.
2. How does your client know that it’s sending the right commands in the right order? How does it know the sender is trustworthy? What happened when you didn’t send the right messages or send them in the wrong order?
The client knows what order messages need to be sent by the protocol that is set by the client. Commands such as LIST and CWD cannot execute until the USER and PASS commands are sent and the user can login. The client is able to know the server is trustworthy based of the server responses received by the client. To ensure that data is not lost or sent the wrong way, the client waits for the correct response from the server. Messages that are sent incorrectly or in the wrong order will receive a response of failure from the server. A 550 or 500 response means that there was an issue with what the client sent. If there is not error type response from the server, the protocol will carry on.