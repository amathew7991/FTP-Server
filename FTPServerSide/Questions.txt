1. A peer to peer file transfer protocol would both its own advantages and disadvantages. By having the protocol as peer to peer, it is easier to transfer files back and forth. This allows for a two way transfer of files since machines will act as both client and server. A disadvantage to peer to peer is that since the traffic is unpredictable, the network can be overworked, resulting in the loss of information. There is also a concern with security since in peer to peer there would be no action of logging on and authenticating to a server. 
2. Since there were not many security measures placed when I was implementing the server, I believe that an external party would be able to hack it. One main reason is because the configuration file for authorized users to stored in plain text. Any hacker that gains access to this file has information on how to log into the server. A better approach would be to encrypt the user names and password so that they are not accessible in plain text. Another way of hacking could be by overloading the server. Although the FTP server is concurrent and will be able to run multiple clients, there is a possibility that the system could be overloaded with a large amount of clients running. 
3. FTP is a good protocol for file transfering because of its simplicity. The communication between the client and server is just a series of requests and responses, where the server sends back easy to understand responses regardless of whether the client request was successful or not. A major downside of the FTP protocol is that is lacks security; it is inherently a non-secure way to transfer data. Usernames and passwords are sent in clear text and give way to being exploited by hackers. Some weird parts of the FTP server is active and passive modes. When using the PORT command the server recommends that the user user passive mode instead. Since using passive is the recommended option, it is weird that the FTP server uses PORT at all. 
4. Using the same socket could lead to a queue building up when sending and receiving through one socket, or even create race conditions. Both of these possible issues would lead to the ftp server responding slower or some commands and responses getting lost in transfer. In order to work around these issues, it would be more difficult to make the FTP use one channel. It would be implemented to check that that right responses was received and returned in the correct order. There would also need to be a way to handle checking for loss of data during transfers. 